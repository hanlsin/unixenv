#!/bin/bash
#
# @brief  Set personal environment to develope.
#
# @author   Yun Woo Park

###############################################################################
# Default environment
####

# check OS
os=`uname`
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	echo $os
elif [[ "$OSTYPE" == "darwin"* ]]; then
	# Mac OSX
	echo $os
elif [[ "$OSTYPE" == "cygwin" ]]; then
	# POSIX compatibility layer and Linux environment emulation for Windows
	echo $os
elif [[ "$OSTYPE" == "msys" ]]; then
	# Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
	echo $os
elif [[ "$OSTYPE" == "freebsd"* ]]; then
	# FreeBSD
	echo $os
else
	# Unknown.
	echo $os
fi

# check environment variable HOME exist
if env | grep -q ^HOME=
then
	uname=`whoami`
	if [[ "$OSTYPE" == "linux-gnu" ]]; then
		export HOME=/home/$uname
	elif [[ "$OSTYPE" == "darwin"* ]]; then
		export HOME=/Users/$uname
	fi
fi


###############################################################################
# Additional Profiles
####

# prompt profile
if [ -f ~/yp_profile/yp_prompt_profile ]; then
    . ~/yp_profile/yp_prompt_profile
fi
#fn_fancy_prompt

# compound commands profile
if [ -f ~/yp_profile/yp_command_profile ]; then
    . ~/yp_profile/yp_command_profile
fi
alias findpid='fn_findpid'

# python profile
if [ -f ~/yp_profile/yp_python_profile ]; then
    . ~/yp_profile/yp_python_profile
fi

# golang profile
if [ -f ~/yp_profile/yp_golang_profile ]; then
    . ~/yp_profile/yp_golang_profile
fi

# ROS profile
if [ -f ~/yp_profile/yp_ros_profile ]; then
    . ~/yp_profile/yp_ros_profile
fi

# for TIBERO
#if [ -f ~/yp_profile/tibero_profile ]; then
#    . ~/yp_profile/tibero_profile
#fi

# for Blocko
if [ -f ~/yp_profile/blocko_profile ]; then
    . ~/yp_profile/blocko_profile
fi

# for Loblo
if [ -f ~/yp_profile/loblo_profile ]; then
    . ~/yp_profile/loblo_profile
fi


###############################################################################
# Additional Settings
####

# direct ssh
alias gomac='ssh "Yun Woo Park"@yun-macbookair.local'

# TMUX 관련 alias
alias tm='tmux'
alias tl='tmux ls'
alias ta='tmux attach -t '
alias tk='tmux kill-session -t '

# for 'ls' command
#export CLICOLOR=1
#export LSCOLORS=
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	alias ls='ls --color=auto'
	alias ll='ls --color=auto -al'
elif [[ "$OSTYPE" == "darwin"* ]]; then
	alias ls='ls -G'
	alias ll='ls -G -al'
else
	alias ll='ls -G -al'
fi

# for virtualenv
#alias vp2='fn_py_virtualenv -p p2 -d ~/virtualenv -n'
alias vp3='fn_py_virtualenv -p p3 -d ~/virtualenv -n vp3'
#alias va2='fn_py_virtualenv -p a2 -d ~/virtualenv -n'
alias va3='fn_py_virtualenv -p a3 -d ~/virtualenv -n va3'

# shortcut for 'yp' working directory and set golang and ros
alias ypgo='fn_go_initenv ~/work/yp'
alias ypros='fn_ros_init'

# restore default go enviroement
alias esc='fn_go_initenv __GOTO_DEFAULT__'

# shortcut for catkin of ROS working space
alias catkin='fn_automato_goros;cd ~/work/yp/ros/catkin_ws;source devel/setup.bash;echo $ROS_PACKAGE_PATH'

# study Self-Driving Car
alias study='cd /DATA/private/study'

# AuTomato
alias automato='cd /DATA/work/automato'


###############################################################################
# Startup Commands
####
ypgo


###############################################################################
# deprecated
####

# vim alias
#**NOTE:** +python 오류 발생 시 vim-nox-py2 설치
#alias vim=/usr/local/bin/vim
#alias vi=vim

# ctags for Mac
#alias ctags="`brew --prefix`/bin/ctags"

# for eclipse
#export ECLIPSE_HOME='$HOME/Applications/eclipse/java-neon/eclipse'
#alias eclimd='$ECLIPSE_HOME/eclimd &'
#alias eclimvi='vim +PingEclim'

# for Android
#export ANDROID_SDK_PATH=$HOME/Library/Android/sdk
#export PATH=$ANDROID_SDK_PATH/platform-tools:$PATH

# for Docker
# Delete all stopped containers (including data-only containers).
#docker ps -a -q --no-trunc --filter "status=exited" | xargs --no-run-if-empty docker rm -v
# Delete all tagged images more than a month old
# (will fail to remove images still used).
#docker images --no-trunc --format '{{.ID}} {{.CreatedSince}}' | grep ' months' | awk '{ print $1 }' | xargs --no-run-if-empty docker rmi || true
# Delete all 'untagged/dangling' (<none>) images
# Those are used for Docker caching mechanism.
#docker images -q --no-trunc --filter dangling=true | xargs --no-run-if-empty docker rmi
# Delete all dangling volumes.
#docker volume ls -qf dangling=true | xargs --no-run-if-empty docker volume rm

# call Visual Studio Code on Mac
#alias code='/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code'
