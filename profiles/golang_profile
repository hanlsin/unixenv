#!/bin/bash
#
# @brief  Set environment for the Golang environment.
#
# @author   Yun Woo Park

# check GOROOT
if [ ! ${GOROOT} ];
then
	export GOROOT=/usr/local/go
fi

if [ -d "$GOROOT" ];
then
	# add GOROOT/bin to PATH
	export PATH=$GOROOT/bin:$PATH
fi

# backup original environment variables
export _YPGO_ORIGINAL_PATH=$PATH
export _YPGO_ORIGINAL_CDPATH=$CDPATH
export _YPGO_ORIGINAL_GOPATH=$GOPATH

#**NOTE:** If you are using Go 1.5, you must manually enable the vendor
# experiment by setting the `GO15VENDOREXPERIMENT` environment variable to `1`.
# This step is not required for Go 1.6.
#export GO15VENDOREXPERIMENT=1

# to set go environment
function fn_go_initenv ()
{
	if [ ! -z $1 ] && [ "__GOTO_DEFAULT__" = $1 ]
	then
		# recover original variables
		export GOPATH=$_YPGO_ORIGINAL_GOPATH
		export PATH=$_YPGO_ORIGINAL_PATH
		export CDPATH=$_YPGO_ORIGINAL_CDPATH

		return
	elif [ -z $1 ] || [ ! -d $1 ]
	then
		echo "ERROR: $1 is not exist or not a  directory: ${FUNCNAME[0]} [<dir>]"

		return
	fi

	GOPATH=$_YPGO_ORIGINAL_GOPATH
	PATH=$_YPGO_ORIGINAL_PATH
	CDPATH=$_YPGO_ORIGINAL_CDPATH

	work_path=$1

	export GOPATH=$work_path/go
	export PATH=$GOPATH/bin:$PATH
	#export CDPATH=$GOPATH/src/github.com:$work_path:$CDPATH

	cd $work_path

	alias home='cd $work_path'
	alias gopath='cd $GOPATH'
	alias gosrc='cd $GOPATH/src'
	alias github='cd $GOPATH/src/github.com'

	fn_go_checktools
}

# to check tools to develop
function fn_go_checktools ()
{
	line='-------------------------'

# bash version 4
if [ "${BASH_VERSINFO}" -ge 4 ]; then
	declare -A tools=(
		["dlv"]='cmds=("go get -u github.com/derekparker/delve/cmd/dlv")'
		["glide"]='cmds=("go get -u github.com/Masterminds/glide")'
		["gocode"]='cmds=("go get -u github.com/nsf/gocode")'
		["godef"]='cmds=("go get -u github.com/rogpeppe/godef")'
		["golint"]='cmds=("go get -u github.com/golang/lint/golint")'
		["gomodifytags"]='cmds=("go get -u github.com/fatih/gomodifytags")'
		["go-outline"]='cmds=("go get -u github.com/lukehoban/go-outline")'
		["gopkgs"]='cmds=("go get -u github.com/tpng/gopkgs")'
		["gorename"]='cmds=("go get -u golang.org/x/tools/cmd/gorename")'
		["goreturns"]='cmds=("go get -u sourcegraph.com/sqs/goreturns")'
		["go-symbols"]='cmds=("go get -u github.com/newhook/go-symbols")'
		["guru"]='cmds=("go get -u golang.org/x/tools/cmd/guru")'
		["gotests"]='cmds=("go get -u github.com/cweill/gotests/...")'
		["protoc-gen-go"]='cmds=("go get -u github.com/golang/protobuf/protoc-gen-go")'
		["dep"]='cmds=("go get -u github.com/golang/dep/cmd/dep")'
	)

	for tool_name in "${!tools[@]}"
	do
		printf "Golang tool: \033[1;31m%s\033[0m %s " $tool_name "${line:${#tool_name}}"

		file=$GOPATH/bin/$tool_name
		if [ -f "$file" ] && [ "-f" != $1 ]
		then
			printf "[ OK ]\n"
			continue
		fi

		eval ${tools[$tool_name]}

		i=0
		while [ "x${cmds[$i]}" != "x" ]
		do
			cmd=${cmds[$i]}
			if eval $cmd
			then
				printf "[ \033[1;34mINSTALLED\033[0m ]\n"
				i=$(($i + 1))
			else
				printf "[ \033[1;31mFAIL\033[0m ]\n"
				return
			fi
		done
	done
else
	tools=(
		"dlv::go get -u github.com/derekparker/delve/cmd/dlv"
		"glide::go get -u github.com/Masterminds/glide"
		"gocode::go get -u github.com/nsf/gocode"
		"godef::go get -u github.com/rogpeppe/godef"
		"golint::go get -u github.com/golang/lint/golint"
		"gomodifytags::go get -u github.com/fatih/gomodifytags"
		"go-outline::go get -u github.com/lukehoban/go-outline"
		"gopkgs::go get -u github.com/tpng/gopkgs"
		"gorename::go get -u golang.org/x/tools/cmd/gorename"
		"goreturns::go get -u sourcegraph.com/sqs/goreturns"
		"go-symbols::go get -u github.com/newhook/go-symbols"
		"guru::go get -u golang.org/x/tools/cmd/guru"
		"gotests::go get -u github.com/cweill/gotests/..."
		"protoc-gen-go::go get -u github.com/golang/protobuf/protoc-gen-go"
		"dep::go get -u github.com/golang/dep/cmd/dep"
	)

	for idx in "${tools[@]}"; do
		tool_name=${idx%%::*} 
		tool_cmd="${idx##*::}"

		printf "Golang tool: \033[1;32m%s\033[0m %s " $tool_name "${line:${#tool_name}}"

		file=$GOPATH/bin/$tool_name
		if [ ! -f "$file" ] || [ "-f" = $1 ]
		then
			if eval "${idx##*::}"
			then
				printf "[ \033[1;34mINSTALLED\033[0m ]\n"
			else
				printf "[ \033[1;31mFAIL\033[0m ]\n"
				return
			fi
		else
			printf "[ OK ]\n"
		fi
	done
fi
}

alias gocheck="fn_go_checktools -f"
