""" Yun Woo Park (hanlsin@gmail.com) 1/12/2017

""" ========================================================
""" VIM 기본 설정
set nu                      " generate a line number
set mousehide               " when typing, mouse hide
set bs=indent,eol,start     " when backspace key won't move in Insert mode.
set nolinebreak             " don't wrap words by default
set autoindent              " 자동 들여쓰기
set wrap                    " 자동 줄바꿈
set ruler                   " 커서가 위치한 행과 열을 표시
set nobackup                " 백업파일 생성하지 않음
set noswapfile              " swap 파일 생성하지 않음
set history=50              " 명령어 히스토리
set showmode                " 현재 모드 표시 (삽입, 명령, 블럭모드)
set showcmd                 " 현재 명령 보이기 (r 등의 명령)
set showmatch               " 괄호 매칭 확인
set hlsearch                " when search, result on highlight
set noignorecase            " 검색 시 대소문자 구별하지 않음
set title                   " 제목 표시줄에 파일명 표시
set novisualbell            " 경고소리를 깜빡임으로 대치하지 않음
set binary                  " to view a binary file in a hex view
set noexpandtab             " Tab 대신 Space 삽입: expandtab/noexpandtab
"set ts=8                    " tabstop. size of tab
"set sw=8                    " shiftwidth. size of indent
"set sts=4                   " softtabstop. size of soft tab
"set smarttab
" for 4 space characters tab
set ts=4 sts=0 expandtab sw=4 smarttab
set splitbelow              " set new window is below
set splitright              " set new window is right 
set encoding=utf-8          " set encoding as UTF-8
set term=screen-256color    " set terminal same as tmux.
set clipboard=unnamed       " access the system clipboard on OSX.

" 문법 강조기능 사용
if has("syntax")
	syntax on
endif

" enable folding
set foldmethod=indent
set foldlevel=99
" enable folding with the spacebar
"nnoremap <space> za

" When editing a file, always jump to the last cursor position.
autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif

""" ========================================================
""" vim buffer
"""  - :e : open new buffer
"""  - :b <number> : go to the number buffer
"""  - :bd : close buffer
"" open new buffer
"nnoremap <C-S-t> :enew<Enter>
"" move to previous buffer
"nnoremap <C-F5> :bprevious!<Enter>
"" move to next buffer
"nnoremap <C-F6> :bnext!<Enter>
"" close buffer and move previous
"nnoremap <C-F4> :bp <BAR> bd #<Enter>


""" ========================================================
""" Mapping keys
"" Control windows
if !exists("disable_vim_window_cmds") || disable_vim_window_cmds == 0
	""" Moving cursor to other windows
	" split navigation: go up. CTRL-W_CTRL-J, CTRL-W_j
	"nmap <C-X>j <C-w>j
	nnoremap <C-J> <C-W><C-J>
	" split navigation: go down. CTRL-W_CTRL-K, CTRL-W_k
	"nmap <C-X>k <C-w>k
	nnoremap <C-K> <C-W><C-K>
	" split navigation: go right. CTRL-W_CTRL-L, CTRL-W_l
	"nmap <C-X>l <C-w>l
	nnoremap <C-L> <C-W><C-L>
	" split navigation: go left. CTRL-W_CTRL-H, CTRL-W_h
	"nmap <C-X>h <C-w>h
	nnoremap <C-H> <C-W><C-H>

	""" Opening and closing a window
	" split vertically. :vs, :vsplit
	"nmap <C-X>3 <C-w>v
	" split horizontally. :sp, :split
	"nmap <C-X>2 <C-w>s
	" close all other windows. :on, :only
	"nmap <C-X>1 <C-w>o
	" close current window. :clo, :close
	"nmap <C-X>1 <C-w>c

	""" Window resizing
	" increase current window height.
	map <F9> <C-W>+
	" decrease current window height.
	map <F10> <C-W>-
	" make all windows equally high and wide.
	map <F11> <C-W>=
	" set current window height to highest possible.
	map <F12> <C-W>_
	" move cursor to window below/right. CTRL-W_w, CTRL-W_CTRL-W
	"nmap <F6> <C-w><C-w>
	" move cursor to window below/right in same buffer.
	"nmap <buffer> <F6> <C-w><C-w>
endif

"" Moving tab pages
"" http://vim.wikia.com/wiki/Using_tab_pages
if !exists("disable_vim_tab_pages_traversal") || disable_vim_tab_pages_traversal == 0
	" go to next tab
	nmap <C-T><C-T> :tabnext<CR>
	" go to previous tab
	nmap <C-T>p :tabprevious<CR>
endif

" change <leader> Key from default '\'
let mapleader=","

"" Moving buffer traversal
if !exists("disable_vim_buffer_traversal") || disable_vim_buffer_traversal == 0
	" show all buffers. :buffers, :ls
	nmap <leader>, :ls<CR>:e #
	" go to next buffer in list. :bn, :bnext
	nmap <leader>n :bnext<CR>
	" go to previous buffer in list. :bp, :bprevious
	nmap <leader>p :bprev<CR>
	" search and split for {file} in 'path'. :sf, :sfind
	nmap <leader>f :sf<SPACE>
endif


""" ========================================================
" call yp_vimrc using vim-plug
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_vimplug")
	so $YP_VIMRC_DIR/yp_vimrc_vimplug
endif


""" ========================================================
" call yp_vimrc using vundle
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_vundle")
	so $YP_VIMRC_DIR/yp_vimrc_vundle
endif


""" ========================================================
""" 추가 vimrc 로딩.
" python 설정
"au FileType python so $YP_VIMRC_DIR/yp_vimrc_py
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_py")
	so $YP_VIMRC_DIR/yp_vimrc_py
endif
" c 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_c")
	so $YP_VIMRC_DIR/yp_vimrc_c
endif
" web language 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_web")
	so $YP_VIMRC_DIR/yp_vimrc_web
endif
" golang 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_go")
	so $YP_VIMRC_DIR/yp_vimrc_go
endif
" Ethereum solidity 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_sol")
	so $YP_VIMRC_DIR/yp_vimrc_sol
endif
" yaml 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_yaml")
	so $YP_VIMRC_DIR/yp_vimrc_yaml
endif
" lua 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_lua")
	so $YP_VIMRC_DIR/yp_vimrc_lua
endif
" markdown 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_md")
	so $YP_VIMRC_DIR/yp_vimrc_md
endif
" reStructuredText 설정
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_rst")
	so $YP_VIMRC_DIR/yp_vimrc_rst
endif


""" ========================================================
" call yp_vimrc_end
if filereadable($YP_VIMRC_DIR . "/yp_vimrc_end")
	so $YP_VIMRC_DIR/yp_vimrc_end
endif

